apply plugin: 'com.android.application'
apply plugin: 'findbugs'

defaultTasks   'clean','build'

android {
    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            keyAlias 'androiddebugkey'
            keyPassword 'android'
            storePassword 'android'
        }
        release {
            storeFile file('release.keystore')
            keyAlias 'androiddebugkey'
            keyPassword 'android'
            storePassword 'android'
        }
    }

    dexOptions {
        javaMaxHeapSize "2g"
    }

    compileSdkVersion 23
    buildToolsVersion "23.0.1"
    packagingOptions
            {
                exclude 'META-INF/DEPENDENCIES.txt'
                exclude 'META-INF/LICENSE.txt'
                exclude 'META-INF/NOTICE.txt'
                exclude 'META-INF/NOTICE'
                exclude 'META-INF/LICENSE'
                exclude 'META-INF/DEPENDENCIES'
                exclude 'META-INF/notice.txt'
                exclude 'META-INF/license.txt'
                exclude 'META-INF/dependencies.txt'
                exclude 'META-INF/LGPL2.1'
                exclude 'META-INF/ASL2.0'
            }
    defaultConfig {
        testInstrumentationRunner "com.android.test.runner.MultiDexTestRunner"
        multiDexEnabled true
        applicationId "de.fh_dortmund.beerbuddy_44"
        minSdkVersion 18
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
        buildConfigField "String", "LOCAL_IP", '\"' + "217.160.126.153" + '\"'
    }


    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    productFlavors {
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
}

// Get the ip address by interface name
def getLocalIp() {
    NetworkInterface iface = NetworkInterface.getByIndex(3);
    for (InterfaceAddress address : iface.getInterfaceAddresses()) {
        String ip = address.getAddress().getHostAddress()
        if (ip.length() <= 15) {
            println '-------- The ip is ' + ip;
            return ip;
        }
    }
}

configurations {
    androidTestCompile.exclude group: 'com.google.android.gms'
    androidTestCompile.exclude module: 'play-services:7.8.0'
    androidTestCompile.exclude module: 'multidex'
}


dependencies {
    compile (project(':common'))
    testCompile 'junit:junit:4.12'
    compile ('com.google.android.gms:play-services-maps:7.8.0'){
        exclude module: 'support-v4'
    }
    compile 'com.android.support:appcompat-v7:23.1.0'
    compile 'com.octo.android.robospice:robospice-spring-android:1.4.14'
    compile ('com.android.support:design:23.1.0'){
        exclude module: 'appcompat-v7'
        exclude module: 'support-v4'
    }
    compile ('com.sothree.slidinguppanel:library:3.2.0')
            {
                exclude module: 'support-annotations'
                exclude module: 'recyclerview-v7'
                exclude module: 'support-v4'
            }
}
